package com.example.demo.entities;

import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import org.springframework.data.jpa.repository.JpaRepository;
//when we use JpaRepository inside Repository then only we are able to use Annotations like @Entity,@Table,@Id inside jpa all these annotations are inbuilt
// for creating Table inside database we had used Annotations like @Entity,@Table,@Id 
@Entity
@Table
public class Customer {
	@Id
	@GeneratedValue           //we don't need to pass id value to our code it will be generated by default
	private int id; 
	private String name;
	private String email;
	
	

	

	public int getId() { 
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}
	@Override                                                                                     //child class method is overiding its  base class method 
	public String toString() {
		return "Customer [id=" + id + ", name=" + name + ", email=" + email + ", accounts=" + accounts + "]";
	}
	
	                                                                                                                       //A constructor is a special type of member function that is called automatically when an object is created,it has the same name as that of the class and it does not have a return type.
	//parameterized
	public Customer(int id, String name, String email) {
		super();
		this.id = id;
		this.name = name;
		this.email = email;
	}
     //default constructor
	public Customer() {
		super();
		// TODO Auto-generated constructor stub
	}
	
	public Customer(int id, String name, String email, List<Account> accounts) {
		super();
		this.id = id;
		this.name = name;
		this.email = email;
		this.accounts = accounts;
	}
	
	
	public List<Account> getAccounts() {
		return accounts;
	}

	public void setAccounts(List<Account> accounts) {
		this.accounts = accounts;
	}

	                                                                                                                     //one customer can have multiple account{fd account,current account,demat account} 
	                                                                                                                     //@OneToMany:    is used to map source entity with target entity
	 
	@OneToMany(targetEntity = Account.class, cascade = CascadeType.ALL)          
	@JoinColumn(name = "ac_fk", referencedColumnName = "id")                                                              //we are going to join columns of customer and account in single column which is named as "ac_fk",with using reference as id
	List<Account> accounts;

	
	
	//for src/test/java,            //Integration testing
	public Customer(int localport, String string, Account account) {
		// TODO Auto-generated constructor stub
		}

	
	

	

}
